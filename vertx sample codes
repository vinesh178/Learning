		//Authorize with Jwt tokent
    
                Router router = Router.router(vertx);

		JWTAuth provider = JWTAuth.create(vertx, new JWTAuthOptions().addPubSecKey(
				new PubSecKeyOptions().setAlgorithm("HS256").setPublicKey("keyboard cat").setSymmetric(true)));

		router.route("/api/*").handler(JWTAuthHandler.create(provider, "/api/newToken"));

		router.get("/api/newToken").handler(ctx -> {
			ctx.response().putHeader("Content-Type", "text/plain");
			ctx.response().end(provider.generateToken(new JsonObject(), new JWTOptions().setExpiresInSeconds(60)));
		});

		router.get("/api/protected").handler(ctx -> {
			ctx.response().putHeader("Content-Type", "text/plain");
			ctx.response().end("a secret you should keep for yourself...");
		});

//		router.route().handler(StaticHandler.create());
		router.route().handler(BodyHandler.create());
		router.post("/api/login").handler(this::login);

		vertx.createHttpServer().requestHandler(router).listen(2815);

//Hashing passwords using Bcrypt
	String hashedPassword = BCrypt.withDefaults().hashToString(10, password.toCharArray());

	System.out.println(BCrypt.verifyer().verify(password.getBytes(), hashedPassword.getBytes()).verified);

//Python script to scrape behind login

from bs4 import BeautifulSoup
import requests

# Start the session
session = requests.Session()

# Create the payload
payload = {'_username':'[YOUR_USERNAME]', 
          '_password':'[YOUR_PASSWORD]'
         }

# Post the payload to the site to log in
s = session.post("https://www.chess.com/login_check", data=payload)

# Navigate to the next page and scrape the data
s = session.get('https://www.chess.com/today')

soup = BeautifulSoup(s.text, 'html.parser')
soup.find('img')['src']
print(soup.encode("utf-8"))
